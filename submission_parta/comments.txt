1.1 For calculating the number of available moves. The time complexity is O(N) where N is the total number of white + black pieces.

1.2 The space complexity is O(1), as we don't store any information, only keep a counter of possible moves.


2.1 For calculating the sequence of moves to eliminate all enemy piece, we model the problem as follows:
  - Each state / node is represented by a complete board layout (8x8 two-dimensional array, or a 64-dimensional vector)
  - A move by any piece will change the state. We only take a snapshot of the state after elimination of pieces is handled. 

  
2.2 We use breadth first search. We only explore board states that we have not seen before.

2.3 The branching factor is equal to the number of available moves for the white pieces at each state (where the maximum will be 4*M, M being the number of white pieces; but in reality it is probably less than that).

2.4 The maximum search depth is equal to the minimum number of steps required to eliminate all black pieces.

2.5 Our algorithm always return the shortest possible sequence of moves that will eliminate all enemy pieces, if the input guarantees there is a possible solution. Otherwise the algorithm will search all the possible move sequences and quit, or be terminated if it is taking too long.  
